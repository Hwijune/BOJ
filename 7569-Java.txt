package block;
 
import java.io.*;
 
import java.util.*;
 
public class Main
{
    static int dx[] = { 0, 1, 0, -1, 0, 0 };
    static int dy[] = { 1, 0, -1, 0, 0, 0 };
    static int dz[] = { 0, 0, 0, 0, 1, -1 };
    static int box[][][] = new int[101][101][101];
    static int check[][][] = new int[101][101][101];
    static Queue<Pos> q = new LinkedList<>();
    
    static public class Pos // 좌표
    {
        public int first;
        public int second;
        public int third;
        
        Pos(int i, int j, int h)
        {
            this.first = i;
            this.second = j;
            this.third = h;
        }
    }
    
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int M = Integer.parseInt(st.nextToken());
        int N = Integer.parseInt(st.nextToken());
        int H = Integer.parseInt(st.nextToken());
        
        for (int w = 0; w < H; w++)
        {
            for (int i = 0; i < N; i++)
            {
                st = new StringTokenizer(br.readLine());
                for (int j = 0; j < M; j++)
                {
                    box[i][j][w] = Integer.parseInt(st.nextToken());
                    if (box[i][j][w] == 1) // 익은 것 큐에넣기
                    {
                        q.offer(new Pos(j, i, w));
                        check[i][j][w] = 1;
                    }
                }
            }
        }
        
        while (!q.isEmpty())
        {
            Pos temp = q.peek();
            q.poll();
            
            // 익은 토마토의 상하좌우는 다음에 익기 때문에 큐에 담아야한다.
            // 0,1(하단) 0,-1(상단) 1,0(우) -1,0(좌)
            for (int i = 0; i < 6; i++)
            {
                int nx = temp.first + dx[i];
                int ny = temp.second + dy[i];
                int nz = temp.third + dz[i];
                
                // 상자 범위 안
                if (nx >= 0 && nx < M && ny >= 0 && ny < N && nz >= 0 && nz < H)
                {
                    if (check[ny][nx][nz] == 0 && box[ny][nx][nz] == 0)
                    {
                        box[ny][nx][nz] = 1;
                        check[ny][nx][nz] = check[temp.second][temp.first][temp.third] + 1;
                        q.offer(new Pos(nx, ny, nz));
                    }
                }
            }
        }
        
        int flag = 0;
        int max = 0;
        for (int w = 0; w < H; w++)
        {
            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < M; j++)
                {
                    if (box[i][j][w] == 0) // 다 돌았는데도 0이있음
                    {
                        flag = 1;
                    }
                    if (check[i][j][w] > max)
                        max = check[i][j][w];
                }
            }
        }
        if (flag == 1)
            System.out.println(-1);
        else
            System.out.println(max - 1);
    }
}