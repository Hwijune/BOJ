import java.io.*;
 
import java.util.*;
 
public class Main
{
    static ArrayList<Edge>[] tree;
    static int ans = 0;
    static int dist[];
    static int u, v, w;
    
    static public class Edge // ¿§Áö
    {
        public int v;
        public int w;
        
        Edge(int vertex, int weight)
        {
            this.v = vertex;
            this.w = weight;
        }
    }
    
    static public void dfs(int vertex, int d)
    {
        dist[vertex] = d;
        
        if (dist[vertex] > ans)
        {
            ans = dist[vertex];
            u = vertex;
        }
        
        for (Edge node : tree[vertex])
        {
            int next = node.v;
            int weight = node.w;
            
            if (dist[next] == 0)
            {
                dfs(next, d + weight);
            }
        }
        
    }
    
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        tree = (ArrayList<Edge>[]) new ArrayList[10001];
        dist = new int[10001];
     
        for (int i = 1; i <= 10000; i++) {
            tree[i] = new ArrayList<>();
        }
     
        int n = Integer.parseInt(br.readLine());
     
        for (int i = 0; i < n - 1; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            
            int parent = Integer.parseInt(st.nextToken());
            int child = Integer.parseInt(st.nextToken());
            int weight = Integer.parseInt(st.nextToken());
     
            tree[parent].add(new Edge(child, weight));
            tree[child].add(new Edge(parent, weight));
        }
     
        dfs(1, 0);
     
        ans = 0;
        dist = new int[10001];
     
        dfs(u, 0);
        System.out.println(ans);
    }
}
