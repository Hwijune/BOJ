#include <iostream>
#include <queue>
using namespace std;
typedef pair<int, pair<int, int> > mulq;
 
int dx[6] = { 0,1,0,-1,0,0 };
int dy[6] = { 1,0,-1,0,0,0 };
int dz[6] = { 0,0,0,0,1,-1 };
int box[101][101][101];
int check[101][101][101];
queue<mulq> q;
int M, N, H;
 
void bfs() {
    while (!q.empty()) {
        mulq temp = q.front();
        q.pop();
 
        for (int i = 0; i < 6; i++) {
            int nx = temp.first + dx[i]; // x
            int ny = temp.second.first + dy[i]; // y
            int nz = temp.second.second + dz[i]; // z
 
            if (nx >= 0 && nx < M && ny >= 0 && ny < N && nz >= 0 && nz < H) {
                if (check[ny][nx][nz] == 0 && box[ny][nx][nz] == 0)
                {
                    box[ny][nx][nz] = 1;
                    check[ny][nx][nz] = check[temp.second.first][temp.first][temp.second.second] + 1;
                    q.push(make_pair(nx, make_pair(ny, nz)));
                }
            }
        }
    }
}
int main(void) {
 
    cin >> M >> N >> H;
 
    for (int w = 0; w < H; w++)
    {
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < M; j++)
            {
                cin >> box[i][j][w];
                if (box[i][j][w] == 1) // 익은 것 큐에넣기
                {
                    q.push(make_pair(j, make_pair(i, w)));
                    check[i][j][w] = 1;
                }
            }
        }
    }
 
    bfs();
 
    /*
    for (int w = 0; w < H; w++)
    {
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < M; j++)
            {
                cout << check[i][j][w] << " ";
            }
            cout << "\n";
        }
    }
    cout << "\n\n";
    */
 
    int flag = 0;
    int max = 0;
    for (int w = 0; w< H; w++)
    {
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < M; j++)
            {
                if (box[i][j][w] == 0) // 다 돌았는데도 0이있음
                {
                    flag = 1;
                }
                if (check[i][j][w] > max)
                    max = check[i][j][w];
            }
        }
    }
    if (flag == 1)
        cout << -1 << '\n';
    else
        cout << max - 1 << '\n';
 
 
    return 0;
}
